/**************************************************************************
 **                                                                       *
 **    Copyright (c) 2001-2014, Intel Corporation.                     .    *
 **                                                                       *
 **************************************************************************/

/*! @file      ncp_vpm.h
 *  @brief     This file contains APIs related to Virtual Pipelines.
 *
 *  @addtogroup _vp_ Virtual Pipeline
 *
 *  @{
 */


#ifndef _NCP_VPM_H_
#define _NCP_VPM_H_

#ifdef __cplusplus
extern "C" {
#endif

/*
 * Data type definitions
 */

/*!
 * @brief Launch engine enum. Enum defining engines that are launch engines.
 * @see ncp_vp_handle_get
 */
typedef enum ncp_launch_engine_type_e {
    ncp_launch_engine_min = 0,
    ncp_launch_engine_eioa = 0,     /*!< eioa launch engine */
    ncp_launch_engine_mpp,          /*!< mpp launch engine */
    ncp_launch_engine_cpu,          /*!< cpu launch engine */
    ncp_launch_engine_expander,     /*!< expander launch engine */
    ncp_launch_engine_tdmioa,       /*!< tdmioa launch engine */
    ncp_launch_engine_max
} ncp_launch_engine_type_t;

/* function pointer declaration for encode/decode functions */

/*!
 * @brief Function pointer type definition for flow data encode function.
 * This function is automatically generated by ASE depending upon the structure 
 * of flow data defined by user in ASE. Based on this definition, a structure is 
 * generated by ASE. This structure may be different from how the
 * hardware requires it. It converts the flow data from the format 
 * defined by the user to the format as required by the hardware. It is not 
 * generated when conversion is not needed. If defined, it is called by 
 * ncp_vp_flow_data_write() API, before writing the flow data to System Memory. 
 * @param dest destination buffer. In the format needed by hardware.
 * @param src source buffer. In the format as defined by the user.
 * @see ncp_vp_flow_data_func_set
 * @see ncp_vp_flow_data_write
 */

typedef void (* ncp_flow_data_encode_fn)(void *dest, void *src);

/*!
 * @brief Function pointer type definition for flow data decode function.
 * This function is automatically generated by ASE depending upon the structure 
 * of flow data defined by user in ASE. Based on this definition, a structure is 
 * generated by ASE. This structure may be different from how the
 * hardware requires it. It converts the flow data from the format 
 * as required by the hardware to the format as defined by the user. It is not 
 * generated when conversion is not needed.
 * @param dest destination buffer. In the format as defined by the user.
 * @param src source buffer. In the format needed by hardware.
 * @see ncp_vp_flow_data_func_set
 */

typedef void (* ncp_flow_data_decode_fn)(void *dest, void *src);

/*!
 * @brief Function pointer type definition for task param encode function.
 * This function is automatically generated by ASE depending upon the definition 
 * of Virtual Pipelines launching from CPU. The format of task parameters 
 * generated by CPU to the next engine can be defined by user in ASE. Based on 
 * this definition, a structure is generated by ASE. This structure may be 
 * different from how the hardware requires it. This function converts the 
 * structure as defined by user to as required by hardware. It is not generated 
 * when conversion is not needed. This function is called automatically by 
 * the task send APIs when sending a task from CPU.
 * @param dest destination buffer. In the format as needed by hardware.
 * @param src source buffer. In the format as defined by user.
 * @see ncp_vp_task_param_encode_func_set
 * @see ncp_task_send
 * @see ncp_task_send_segments
 */

typedef void (* ncp_task_param_encode_fn)(void *dest, void *src);

/*!
 * @brief Function pointer type definition for task param decode function.
 * This function is automatically generated by ASE depending upon the definition 
 * of Virtual Pipelines terminating in CPU. The format of task parameters 
 * received by CPU from previous engine can be defined by user in ASE. Based on 
 * this definition, a structure is generated by ASE. This structure may be 
 * different from how the hardware requires it. This function converts the 
 * structure as required by hardware to as defined by user. It is not generated 
 * when conversion is not needed. This function is called automatically by 
 * the task receive APIs when receiving a task from CPU.
 * @param dest destination buffer. In the format as defined by user.
 * @param src source buffer. In the format as needed by hardware.
 * @see ncp_vp_task_param_decode_func_set
 * @see ncp_task_recv
 */

typedef void (* ncp_task_param_decode_fn)(void *dest, void *src);

/*!
 * @brief Maximum flow data size in bytes.
 */
#define NCP_FLOW_DATA_MAX_SIZE  128

/*!
 * @brief Flow Header and Flow Data structure
 * @see ncp_vp_flow_data_write
 */
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     /* word 0 */
     unsigned      taskPrio              :  3; /*!< task priority to be used for tasks using this flow data entry. */
     unsigned      debug                 :  2; /*!< debug field */
     unsigned      reserved1             :  27;/*!< reserved. Set it to zero. */
     /* word 1 */
     unsigned      reserved2             :  32;/*!< reserved. Set it to zero. */
     /* data */
     char          flowParms[NCP_FLOW_DATA_MAX_SIZE]; /*!< upto 128 bytes of flow data as defined in ASE. */
#else    /* Little Endian */
     /* word 0 */
     unsigned      reserved1             :  27;/*!< reserved. Set it to zero. */
     unsigned      debug                 :  2; /*!< debug field */
     unsigned      taskPrio              :  3; /*!< task priority to be used for tasks using this flow data entry. */
     /* word 1 */
     unsigned      reserved2             :  32;/*!< reserved. Set it to zero. */
     /* data */
     char          flowParms[NCP_FLOW_DATA_MAX_SIZE]; /*!< upto 128 bytes of flow data as defined in ASE. */
#endif
} ncp_vp_flow_data_t;

/*
 * APIs exported by VPM
 */

/*!
 * @brief This API is used to get the Virtual Pipeline handle given the type of 
 * launching engine (CPU, MPP, EIOA and Multicast) and the name of the 
 * Virtual Pipeline. The cookie needs to be passed as one of the parameter, the 
 * value of which needs to be same as the one in config file. bCheckCookie param 
 * is used to specify whether to validate the cookie or not. Validating the cookie
 * helps prevent scenarios when the config file and ASE generated C code are 
 * out of sync causing unexpected behavior. The check is optional if the 
 * application can ensure that the ASE generated code is up to date.
 * The Virtual Pipeline handle is returned in vpHdl.
 * @param[in] ncpHdl  NCP API state handle.
 * @param[in] cookie The C cookie value of this VP generated by ASE.
 * @param[in] bCheckCookie TRUE to check the cookie value, FALSE otherwise.
 * @param[in] type Launch engine type.
 * @param[in] vpName name of the virtual pipeline.
 * @param[in,out] vpHdl virtual pipeline handle is returned.
 * @retval NCP_ST_INVALID_HANDLE When ncpHdl is invalid.
 * @retval NCP_ST_VPM_INVALID_LAUNCH_ENGINE When type is out of range.
 * @retval NCP_ST_VPM_INVALID_VP_NAME When vpName is NULL.
 * @retval NCP_ST_VPM_VP_NOT_FOUND When a VP of given type and name is not 
 *         found.
 * @retval NCP_ST_VPM_INVALID_VP_HDL When the virtual pipeline handle 
 *         retrieved is invalid.
 * @retval NCP_ST_VPM_C_COOKIE_MISMATCH When the cookie value passed does not 
 *         match with the virtual pipeline cookie in config file.
 * @retval NCP_ST_SUCCESS When a valid Virtual Pipeline of given type and name 
 *         is found.
 */

NCP_API ncp_st_t
ncp_vp_handle_get(
            ncp_hdl_t  ncpHdl,
            ncp_uint64_t cookie,
            ncp_bool_t bCheckCookie,
            ncp_launch_engine_type_t type,
            const char *vpName,
            ncp_vp_hdl_t *vpHdl);

/*!
 * @brief This API is used to get Virtual Pipeline id from its handle.
 * @param[in] vpHdl Virtual Pipeline handle.
 * @param[in,out] vpId Virtual Pipeline id is returned.
 * @retval NCP_ST_VPM_INVALID_VP_HDL When vpHdl is invalid.
 * @retval NCP_ST_SUCCESS When a valid Virtual Pipeline id is returned.
 */
NCP_API ncp_st_t
ncp_vp_id_get(
            ncp_vp_hdl_t vpHdl,
            ncp_uint8_t *vpId);

/*!
 * @brief This API is used to get the number of flows defined for a
 * Virtual Pipeline.
 * @param[in] vpHdl Virtual Pipeline handle.
 * @param[out] numFlows The number of flows is returned here.
 * @retval NCP_ST_VPM_INVALID_VP_HDL When vpHdl is invalid.
 * @retval NCP_ST_SUCCESS When the number of flows for the
 *         Virtual Pipeline is returned.
 */
NCP_API ncp_st_t
ncp_vp_num_flows_get(
            ncp_vp_hdl_t vpHdl,
            ncp_uint32_t *numFlows);

/*!
 * @brief This API is used to determine if a Virtual Pipeline is launched
 * by the specified launch engine.
 * @param[in] vpHdl Virtual Pipeline handle.
 * @param[in] le The launch engine type for comparison with the vpHdl.
 * @retval NCP_ST_VPM_INVALID_VP_HDL When vpHdl is invalid.
 * @retval NCP_ST_VPM_LAUNCH_ENGINE_MISMATCH When vpHdl is valid, but the
 *         Virtual Pipeline is not launched by the specified engine.
 * @retval NCP_ST_SUCCESS When vpHdl is valid, and the  Virtual Pipeline 
 *         is launched by the specified engine.
 */
NCP_API ncp_st_t
ncp_vp_launch_engine_check(
            ncp_vp_hdl_t vpHdl,
            ncp_launch_engine_type_t le);

/*!
 * @brief This API is used to fetch the template id for the CPU terminating 
 * engine sequence. 
 * @param[in] vpHdl Virtual Pipeline handle.
 * @param[in] engineSeqId The engine sequence id.
 * @param[out] templateId The buffer that is updated with the template id.
 * @retval NCP_ST_VPM_INVALID_VP_HDL When vpHdl is invalid.
 * @retval NCP_ST_VPM_ENGINE_SEQUENCE_NOT_FOUND When the engine sequence id is 
 *         invalid.
 * @retval NCP_VPM_INVALID_TEMPLATE_ID_BUFFER When templateId buffer is invalid.
 * @retval NCP_ST_VPM_ENGINE_SEQUENCE_NOT_CPU_TERMINATING When the engine
 *         sequence doesnt terminate in CPU.
 */
NCP_API ncp_st_t
ncp_vp_cpu_terminate_template_id_get(
	        ncp_vp_hdl_t vpHdl,
	        ncp_uint8_t engineSeqId,
            ncp_uint8_t *templateId);

/*!
 * @brief This API is used to set encode and decode functions for a given engine 
 * sequence identified by vpHdl and engineSeqId. The encode function is used by 
 * ncp_vp_flow_data_write() API to encode the flow data structure into hardware 
 * format.
 * @param[in] vpHdl Virtual Pipeline handle.
 * @param[in] engineSeqId Engine Sequence id.
 * @param[in] encode flow data encode function pointer.
 * @param[in] decode flow data decode function pointer.
 * @retval NCP_ST_VPM_INVALID_VP_HDL When vpHdl is invalid.
 * @retval NCP_ST_VPM_ENGINE_SEQUENCE_NOT_FOUND When the engine sequence id 
 *         doesn't exist in the Virtual Pipeline.
 * @retval NCP_ST_SUCCESS When the encode and decode functions are set 
 *         successfully.
 */
NCP_API ncp_st_t
ncp_vp_flow_data_func_set(ncp_vp_hdl_t vpHdl,
                          ncp_uint8_t engineSeqId,
                          ncp_flow_data_encode_fn  encode,
                          ncp_flow_data_decode_fn decode);

/*!
 * @brief This API is used to set task param decode function for a given engine 
 * sequence. The engine sequence is identified by vpHdl and engineSeqId. The 
 * decode function is used by ncp_task_recv() API of task i/o module to decode 
 * the task parameters from the received task before sending them up to the 
 * application.
 * @param[in] vpHdl Virtual Pipeline handle.
 * @param[in] engineSeqId Engine Sequence id.
 * @param[in] decode Task Param decode function pointer.
 * @retval NCP_ST_VPM_INVALID_VP_HDL When vpHdl is invalid.
 * @retval NCP_ST_VPM_ENGINE_SEQUENCE_NOT_FOUND When the engine sequence id 
 *         doesn't exist in the Virtual Pipeline.
 * @retval NCP_ST_SUCCESS When the decode function is set successfully.
 * @see ncp_task_recv
 */
NCP_API ncp_st_t
ncp_vp_task_param_decode_func_set(ncp_vp_hdl_t vpHdl,
                                  ncp_uint8_t engineSeqId,
                                  ncp_task_param_decode_fn decode);

/*!
 * @brief This API is used to get the task param decode function for a given
 *          engine sequence. The engine sequence is identified by vpHdl and
 *          engineSeqId. 
 *        You must set the encode func (e.g. by calling the corresponding
 *          ncp_vp_handle_get...() function) before getting it.
 *        Used with Raw Task I/O.
 * @param[in] vpHdl Virtual Pipeline handle.
 * @param[in] engineSeqId Engine Sequence id.
 * @param[in] decode Pointer to task Param decode function pointer.
 * @retval NCP_ST_VPM_INVALID_VP_HDL When vpHdl is invalid.
 * @retval NCP_ST_VPM_ENGINE_SEQUENCE_NOT_FOUND When the engine sequence id 
 *         doesn't exist in the Virtual Pipeline.
 * @retval NCP_ST_INVALID_PARAMETER decode is NULL.
 * @retval NCP_ST_SUCCESS When the decode function is set successfully.
 */
NCP_API ncp_st_t
ncp_vp_task_param_decode_func_get(ncp_vp_hdl_t vpHdl,
                                  ncp_uint8_t engineSeqId,
                                  ncp_task_param_decode_fn *decode);

/*!
 * @brief This API is used to set task param encode function for a given Virtual 
 * Pipeline. The encode function is used by ncp_task_send() and 
 * ncp_task_send_segments() APIs of task i/o module to encode the task parameters 
 * into hardware format during task send.
 * @param[in] vpHdl Virtual Pipeline handle.
 * @param[in] encode Task Param encode function pointer.
 * @retval NCP_ST_VPM_INVALID_VP_HDL When vpHdl is invalid.
 * @retval NCP_ST_VPM_VP_NOT_FOUND When Virtual Pipeline is not found.
 * @retval NCP_ST_VPM_VP_NOT_CPU_LAUNCH_ENGINE When Virtual Pipeline does not start from CPU.
 * @retval NCP_ST_SUCCESS When the encode function is set successfully.
 * @see ncp_task_send
 * @see ncp_task_send_segments
 */
NCP_API ncp_st_t
ncp_vp_task_param_encode_func_set(ncp_vp_hdl_t vpHdl,
                                  ncp_task_param_encode_fn encode);

/*!
 * @brief This function is used to get the task param encode function. You must
 *        set the encode func (e.g. by calling the corresponding 
 *        ncp_vp_handle_get...() function) before getting it.
 *        Used with Raw Task I/O.
 * @param[in] vpHdl Virtual Pipeline handle.
 * @param[in] encode Pointer to task Param encode function pointer.
 * @retval NCP_ST_VPM_INVALID_VP_HDL When vpHdl is invalid.
 * @retval NCP_ST_VPM_ENGINE_SEQUENCE_NOT_FOUND When the engine sequence id 
 *         doesn't exist in the Virtual Pipeline.
 * @retval NCP_ST_INVALID_PARAMETER encode is NULL.
 * @retval NCP_ST_SUCCESS When the encode function is set successfully.
 */
NCP_API ncp_st_t
ncp_vp_task_param_encode_func_get(ncp_vp_hdl_t vpHdl,
                                  ncp_task_param_encode_fn *encode);

/*!
 * @brief This API is used to get the engine sequence id given a Virtual Pipeline 
 * handle and the Engine Sequence name. The engine sequence id is returned in 
 * engineSeqId parameter.
 * @param[in] vpHdl Virtual Pipeline handle.
 * @param[in] engineSeqName Engine Sequence name.
 * @param[in,out] engineSeqId Engine Sequence id is returned.
 * @retval NCP_ST_VPM_INVALID_VP_HDL When vpHdl is invalid.
 * @retval NCP_ST_VPM_INVALID_ENGINE_SEQUENCE_NAME When engineSeqName is NULL.
 * @retval NCP_ST_VPM_ENGINE_SEQUENCE_NOT_FOUND When the engine sequence provided
 *         in engineSeqName parameter is not found in the Virtual Pipeline.
 * @retval NCP_ST_SUCCESS When Engine Sequence id is returned successfully in
 *         engineSeqId.
 */
NCP_API ncp_st_t
ncp_vp_engine_seq_id_get(
            ncp_vp_hdl_t vpHdl,
            const char *engineSeqName,
            ncp_uint8_t *engineSeqId);

/*!
 * @brief This API is relevant for those engine sequences that have flow data 
 * defined. It is used to write a flow data entry for the given vpHdl, 
 * engineSeqId and flowId. Flow id needs to be managed by the caller software. 
 * flowData contains the header fields and flow data content that need to be 
 * filled by application software. Look at definition of ncp_vp_flow_data_t 
 * structure for more details. The implementation of this function converts the 
 * flow data into hardware formatted values and write it to the flow data table 
 * memory.
 * @param[in] vpHdl Virtual Pipeline handle.
 * @param[in] engineSeqId Engine Sequence id.
 * @param[in] flowId Flow id.
 * @param[in] flowData Flow Data.
 * @retval NCP_ST_VPM_INVALID_VP_HDL When the virtual pipeline handle is 
 *         invalid.
 * @retval NCP_ST_VPM_ENGINE_SEQUENCE_NOT_FOUND When the engine sequence with 
 *         the given id doesn't exist.
 * @retval NCP_ST_VPM_INVALID_FLOW_DATA When flowData is NULL.
 * @retval NCP_ST_VPM_FLOW_DATA_NOT_DEFINED This VP does not have flow data 
 *         defined.
 * @retval NCP_ST_VPM_INVALID_FLOW_ID flowId is more than allowable flow ids 
 *         for this Virtual Pipeline. 
 * @retval NCP_ST_SUCCESS Successfully added flow data.
 */
NCP_API ncp_st_t
ncp_vp_flow_data_write(
            ncp_vp_hdl_t vpHdl,
            ncp_uint8_t engineSeqId,
            ncp_uint32_t flowId,
            ncp_vp_flow_data_t *flowData);

/*!
 * @brief This API is relevant for those engine sequences that have flow data 
 * defined. It is used to read a flow data entry for the given vpHdl, 
 * engineSeqId and flowId. Flow id needs to be managed by the caller software. 
 * flowData contains the header fields and flow data content that is filled by
 * the API and returned to the application software. Look at the definition of  
 * ncp_vp_flow_data_t structure for more details. The implementation of this 
 * function reads the flow data and converts it to application defined structure
 * format.
 * @param[in] vpHdl Virtual Pipeline handle.
 * @param[in] engineSeqId Engine Sequence id.
 * @param[in] flowId Flow id.
 * @param[in,out] flowData Flow Data.
 * @retval NCP_ST_VPM_INVALID_VP_HDL When the virtual pipeline handle is 
 *         invalid.
 * @retval NCP_ST_VPM_ENGINE_SEQUENCE_NOT_FOUND When the engine sequence with 
 *         the given id doesn't exist.
 * @retval NCP_ST_VPM_INVALID_FLOW_DATA When flowData is NULL.
 * @retval NCP_ST_VPM_FLOW_DATA_NOT_DEFINED This VP does not have flow data 
 *         defined.
 * @retval NCP_ST_VPM_INVALID_FLOW_ID flowId is more than allowable flow ids 
 *         for this Virtual Pipeline. 
 * @retval NCP_ST_SUCCESS Successfully added flow data.
 */
NCP_API ncp_st_t
ncp_vp_flow_data_read(
            ncp_vp_hdl_t vpHdl,
            ncp_uint8_t engineSeqId,
            ncp_uint32_t flowId,
            ncp_vp_flow_data_t *flowData);

#ifdef __cplusplus
}
#endif

/*!
 * @}
 */

#endif /* #ifndef _NCP_VPM_H_ */

