// Copyright (c) 2008 The Board of Trustees of The Leland Stanford Junior University
// Copyright (c) 2011, 2012 Open Networking Foundation
// Copyright (c) 2012, 2013 Big Switch Networks, Inc.
// This library was generated by the LoxiGen Compiler.
// See the file LICENSE.txt which should have been included in the source distribution

// Automatically generated by LOXI from template const_set_serializer.java
// Do not modify

package org.projectfloodlight.openflow.protocol.ver14;

import org.projectfloodlight.openflow.protocol.*;
import org.projectfloodlight.openflow.protocol.action.*;
import org.projectfloodlight.openflow.protocol.actionid.*;
import org.projectfloodlight.openflow.protocol.bsntlv.*;
import org.projectfloodlight.openflow.protocol.errormsg.*;
import org.projectfloodlight.openflow.protocol.meterband.*;
import org.projectfloodlight.openflow.protocol.instruction.*;
import org.projectfloodlight.openflow.protocol.instructionid.*;
import org.projectfloodlight.openflow.protocol.match.*;
import org.projectfloodlight.openflow.protocol.oxm.*;
import org.projectfloodlight.openflow.protocol.queueprop.*;
import org.projectfloodlight.openflow.types.*;
import org.projectfloodlight.openflow.util.*;
import org.projectfloodlight.openflow.exceptions.*;
import org.projectfloodlight.openflow.protocol.OFPortStatsOpticalFlags;
import java.util.Set;
import io.netty.buffer.ByteBuf;
import com.google.common.hash.PrimitiveSink;
import java.util.EnumSet;
import java.util.Collections;


public class OFPortStatsOpticalFlagsSerializerVer14 {

    public final static int RX_TUNE_VAL = 0x1;
    public final static int TX_TUNE_VAL = 0x2;
    public final static int TX_PWR_VAL = 0x4;
    public final static int RX_PWR_VAL = 0x10;
    public final static int TX_BIAS_VAL = 0x20;
    public final static int TX_TEMP_VAL = 0x40;

    public static Set<OFPortStatsOpticalFlags> readFrom(ByteBuf bb) throws OFParseError {
        try {
            return ofWireValue(bb.readInt());
        } catch (IllegalArgumentException e) {
            throw new OFParseError(e);
        }
    }

    public static void writeTo(ByteBuf bb, Set<OFPortStatsOpticalFlags> set) {
        bb.writeInt(toWireValue(set));
    }

    public static void putTo(Set<OFPortStatsOpticalFlags> set, PrimitiveSink sink) {
        sink.putInt(toWireValue(set));
    }


    public static Set<OFPortStatsOpticalFlags> ofWireValue(int val) {
        EnumSet<OFPortStatsOpticalFlags> set = EnumSet.noneOf(OFPortStatsOpticalFlags.class);

        if((val & RX_TUNE_VAL) != 0)
            set.add(OFPortStatsOpticalFlags.RX_TUNE);
        if((val & TX_TUNE_VAL) != 0)
            set.add(OFPortStatsOpticalFlags.TX_TUNE);
        if((val & TX_PWR_VAL) != 0)
            set.add(OFPortStatsOpticalFlags.TX_PWR);
        if((val & RX_PWR_VAL) != 0)
            set.add(OFPortStatsOpticalFlags.RX_PWR);
        if((val & TX_BIAS_VAL) != 0)
            set.add(OFPortStatsOpticalFlags.TX_BIAS);
        if((val & TX_TEMP_VAL) != 0)
            set.add(OFPortStatsOpticalFlags.TX_TEMP);
        return Collections.unmodifiableSet(set);
    }

    public static int toWireValue(Set<OFPortStatsOpticalFlags> set) {
        int wireValue = 0;

        for(OFPortStatsOpticalFlags e: set) {
            switch(e) {
                case RX_TUNE:
                    wireValue |= RX_TUNE_VAL;
                    break;
                case TX_TUNE:
                    wireValue |= TX_TUNE_VAL;
                    break;
                case TX_PWR:
                    wireValue |= TX_PWR_VAL;
                    break;
                case RX_PWR:
                    wireValue |= RX_PWR_VAL;
                    break;
                case TX_BIAS:
                    wireValue |= TX_BIAS_VAL;
                    break;
                case TX_TEMP:
                    wireValue |= TX_TEMP_VAL;
                    break;
                default:
                    throw new IllegalArgumentException("Illegal enum value for type OFPortStatsOpticalFlags in version 1.4: " + e);
            }
        }
        return wireValue;
    }

}
